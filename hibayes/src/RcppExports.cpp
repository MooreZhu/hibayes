// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// BayesRR
Rcpp::List BayesRR(const NumericVector y, const NumericMatrix X, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_BayesRR(SEXP ySEXP, SEXP XSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesRR(y, X, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesA
Rcpp::List BayesA(const NumericVector y, const NumericMatrix X, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_BayesA(SEXP ySEXP, SEXP XSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesA(y, X, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesBpi
Rcpp::List BayesBpi(const NumericVector y, const NumericMatrix X, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_BayesBpi(SEXP ySEXP, SEXP XSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesBpi(y, X, pi, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesB
Rcpp::List BayesB(const NumericVector y, const NumericMatrix X, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_BayesB(SEXP ySEXP, SEXP XSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesB(y, X, pi, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesCpi
Rcpp::List BayesCpi(const NumericVector y, const NumericMatrix X, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_BayesCpi(SEXP ySEXP, SEXP XSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesCpi(y, X, pi, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesC
Rcpp::List BayesC(const NumericVector y, const NumericMatrix X, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_BayesC(SEXP ySEXP, SEXP XSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesC(y, X, pi, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesLASSO
Rcpp::List BayesLASSO(const NumericVector y, const NumericMatrix X, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_BayesLASSO(SEXP ySEXP, SEXP XSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesLASSO(y, X, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BayesR
Rcpp::List BayesR(const NumericVector y, const NumericMatrix X, const Nullable<NumericVector> pi, const Nullable<NumericVector> fold, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_BayesR(SEXP ySEXP, SEXP XSEXP, SEXP piSEXP, SEXP foldSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type fold(foldSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesR(y, X, pi, fold, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// conjgt
Rcpp::List conjgt(const NumericMatrix sumstat, const SEXP ldm, const Nullable<NumericVector> lambda, const double esp, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_conjgt(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP lambdaSEXP, SEXP espSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type esp(espSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(conjgt(sumstat, ldm, lambda, esp, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// cutwind
arma::vec cutwind(const arma::vec chr, const arma::vec pos, double bp);
RcppExport SEXP _hibayes_cutwind(SEXP chrSEXP, SEXP posSEXP, SEXP bpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type pos(posSEXP);
    Rcpp::traits::input_parameter< double >::type bp(bpSEXP);
    rcpp_result_gen = Rcpp::wrap(cutwind(chr, pos, bp));
    return rcpp_result_gen;
END_RCPP
}
// read_bed
void read_bed(std::string bfile, const SEXP pBigMat, const long maxLine, const bool d, const int threads);
RcppExport SEXP _hibayes_read_bed(SEXP bfileSEXP, SEXP pBigMatSEXP, SEXP maxLineSEXP, SEXP dSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bfile(bfileSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const long >::type maxLine(maxLineSEXP);
    Rcpp::traits::input_parameter< const bool >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    read_bed(bfile, pBigMat, maxLine, d, threads);
    return R_NilValue;
END_RCPP
}
// SBayesRR
Rcpp::List SBayesRR(const NumericMatrix sumstat, const SEXP ldm, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesRR(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesRR(sumstat, ldm, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesA
Rcpp::List SBayesA(const NumericMatrix sumstat, const SEXP ldm, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesA(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesA(sumstat, ldm, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesBpi
Rcpp::List SBayesBpi(const NumericMatrix sumstat, const SEXP ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_SBayesBpi(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesBpi(sumstat, ldm, pi, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesB
Rcpp::List SBayesB(const NumericMatrix sumstat, const SEXP ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesB(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesB(sumstat, ldm, pi, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesCpi
Rcpp::List SBayesCpi(const NumericMatrix sumstat, const SEXP ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_SBayesCpi(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesCpi(sumstat, ldm, pi, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesC
Rcpp::List SBayesC(const NumericMatrix sumstat, const SEXP ldm, const double pi, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesC(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesC(sumstat, ldm, pi, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesLASSO
Rcpp::List SBayesLASSO(const NumericMatrix sumstat, const SEXP ldm, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool verbose);
RcppExport SEXP _hibayes_SBayesLASSO(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesLASSO(sumstat, ldm, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SBayesR
Rcpp::List SBayesR(const NumericMatrix sumstat, const SEXP ldm, const Nullable<NumericVector> pi, const Nullable<NumericVector> fold, const int niter, const int nburn, const Nullable<IntegerVector> windindx, const double wppa, const Nullable<double> vara, const Nullable<double> dfvara, const Nullable<double> s2vara, const Nullable<double> vare, const Nullable<double> dfvare, const Nullable<double> s2vare, const int outfreq, const bool fixpi, const bool verbose);
RcppExport SEXP _hibayes_SBayesR(SEXP sumstatSEXP, SEXP ldmSEXP, SEXP piSEXP, SEXP foldSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP windindxSEXP, SEXP wppaSEXP, SEXP varaSEXP, SEXP dfvaraSEXP, SEXP s2varaSEXP, SEXP vareSEXP, SEXP dfvareSEXP, SEXP s2vareSEXP, SEXP outfreqSEXP, SEXP fixpiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sumstat(sumstatSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector> >::type fold(foldSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const Nullable<IntegerVector> >::type windindx(windindxSEXP);
    Rcpp::traits::input_parameter< const double >::type wppa(wppaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vara(varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvara(dfvaraSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vara(s2varaSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type vare(vareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type dfvare(dfvareSEXP);
    Rcpp::traits::input_parameter< const Nullable<double> >::type s2vare(s2vareSEXP);
    Rcpp::traits::input_parameter< const int >::type outfreq(outfreqSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixpi(fixpiSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SBayesR(sumstat, ldm, pi, fold, niter, nburn, windindx, wppa, vara, dfvara, s2vara, vare, dfvare, s2vare, outfreq, fixpi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// uniform_sample
double uniform_sample(const double start, const double end);
RcppExport SEXP _hibayes_uniform_sample(SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type start(startSEXP);
    Rcpp::traits::input_parameter< const double >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(uniform_sample(start, end));
    return rcpp_result_gen;
END_RCPP
}
// norm_sample
double norm_sample(const double mean, const double sd);
RcppExport SEXP _hibayes_norm_sample(SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_sample(mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// gamma_sample
double gamma_sample(const double shape, const double scale);
RcppExport SEXP _hibayes_gamma_sample(SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_sample(shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// invgamma_sample
double invgamma_sample(const double shape, const double scale);
RcppExport SEXP _hibayes_invgamma_sample(SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(invgamma_sample(shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// chisq_sample
double chisq_sample(const double shape);
RcppExport SEXP _hibayes_chisq_sample(SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(chisq_sample(shape));
    return rcpp_result_gen;
END_RCPP
}
// invchisq_sample
double invchisq_sample(const double shape, const double scale);
RcppExport SEXP _hibayes_invchisq_sample(SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(invchisq_sample(shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// beta_sample
double beta_sample(const double a, const double b);
RcppExport SEXP _hibayes_beta_sample(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_sample(a, b));
    return rcpp_result_gen;
END_RCPP
}
// t_sample
double t_sample(const double shape);
RcppExport SEXP _hibayes_t_sample(SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(t_sample(shape));
    return rcpp_result_gen;
END_RCPP
}
// cauchy_sample
double cauchy_sample(const double location, const double scale);
RcppExport SEXP _hibayes_cauchy_sample(SEXP locationSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cauchy_sample(location, scale));
    return rcpp_result_gen;
END_RCPP
}
// exponential_sample
double exponential_sample(const double scale);
RcppExport SEXP _hibayes_exponential_sample(SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(exponential_sample(scale));
    return rcpp_result_gen;
END_RCPP
}
// laplace_sample
double laplace_sample(const double mean, const double scale);
RcppExport SEXP _hibayes_laplace_sample(SEXP meanSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(laplace_sample(mean, scale));
    return rcpp_result_gen;
END_RCPP
}
// rinvgaussian_sample
double rinvgaussian_sample(double mu, double lambda);
RcppExport SEXP _hibayes_rinvgaussian_sample(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvgaussian_sample(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rdirichlet_sample
NumericVector rdirichlet_sample(const double n, const NumericVector x);
RcppExport SEXP _hibayes_rdirichlet_sample(SEXP nSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rdirichlet_sample(n, x));
    return rcpp_result_gen;
END_RCPP
}
// BigStat
SEXP BigStat(SEXP pBigMat, const int threads);
RcppExport SEXP _hibayes_BigStat(SEXP pBigMatSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(BigStat(pBigMat, threads));
    return rcpp_result_gen;
END_RCPP
}
// tXXmat_Geno
SEXP tXXmat_Geno(SEXP pBigMat, const int chisq, const int threads, const bool verbose);
RcppExport SEXP _hibayes_tXXmat_Geno(SEXP pBigMatSEXP, SEXP chisqSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const int >::type chisq(chisqSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tXXmat_Geno(pBigMat, chisq, threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tXXmat_Geno_gwas
SEXP tXXmat_Geno_gwas(SEXP pBigMat, SEXP gwasgeno, const LogicalVector refindx, const NumericVector gwasindx, const int chisq, const int threads, const bool verbose);
RcppExport SEXP _hibayes_tXXmat_Geno_gwas(SEXP pBigMatSEXP, SEXP gwasgenoSEXP, SEXP refindxSEXP, SEXP gwasindxSEXP, SEXP chisqSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gwasgeno(gwasgenoSEXP);
    Rcpp::traits::input_parameter< const LogicalVector >::type refindx(refindxSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gwasindx(gwasindxSEXP);
    Rcpp::traits::input_parameter< const int >::type chisq(chisqSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tXXmat_Geno_gwas(pBigMat, gwasgeno, refindx, gwasindx, chisq, threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tXXmat_Chr
SEXP tXXmat_Chr(SEXP pBigMat, const NumericVector chr, const int chisq, const int threads, const bool verbose);
RcppExport SEXP _hibayes_tXXmat_Chr(SEXP pBigMatSEXP, SEXP chrSEXP, SEXP chisqSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< const int >::type chisq(chisqSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tXXmat_Chr(pBigMat, chr, chisq, threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// tXXmat_Chr_gwas
SEXP tXXmat_Chr_gwas(SEXP pBigMat, const NumericVector chr, SEXP gwasgeno, const NumericVector gwaschr, const LogicalVector refindx, const NumericVector gwasindx, const int chisq, const int threads, const bool verbose);
RcppExport SEXP _hibayes_tXXmat_Chr_gwas(SEXP pBigMatSEXP, SEXP chrSEXP, SEXP gwasgenoSEXP, SEXP gwaschrSEXP, SEXP refindxSEXP, SEXP gwasindxSEXP, SEXP chisqSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gwasgeno(gwasgenoSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gwaschr(gwaschrSEXP);
    Rcpp::traits::input_parameter< const LogicalVector >::type refindx(refindxSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gwasindx(gwasindxSEXP);
    Rcpp::traits::input_parameter< const int >::type chisq(chisqSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tXXmat_Chr_gwas(pBigMat, chr, gwasgeno, gwaschr, refindx, gwasindx, chisq, threads, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hibayes_BayesRR", (DL_FUNC) &_hibayes_BayesRR, 14},
    {"_hibayes_BayesA", (DL_FUNC) &_hibayes_BayesA, 14},
    {"_hibayes_BayesBpi", (DL_FUNC) &_hibayes_BayesBpi, 16},
    {"_hibayes_BayesB", (DL_FUNC) &_hibayes_BayesB, 15},
    {"_hibayes_BayesCpi", (DL_FUNC) &_hibayes_BayesCpi, 16},
    {"_hibayes_BayesC", (DL_FUNC) &_hibayes_BayesC, 15},
    {"_hibayes_BayesLASSO", (DL_FUNC) &_hibayes_BayesLASSO, 14},
    {"_hibayes_BayesR", (DL_FUNC) &_hibayes_BayesR, 17},
    {"_hibayes_conjgt", (DL_FUNC) &_hibayes_conjgt, 6},
    {"_hibayes_cutwind", (DL_FUNC) &_hibayes_cutwind, 3},
    {"_hibayes_read_bed", (DL_FUNC) &_hibayes_read_bed, 5},
    {"_hibayes_SBayesRR", (DL_FUNC) &_hibayes_SBayesRR, 14},
    {"_hibayes_SBayesA", (DL_FUNC) &_hibayes_SBayesA, 14},
    {"_hibayes_SBayesBpi", (DL_FUNC) &_hibayes_SBayesBpi, 16},
    {"_hibayes_SBayesB", (DL_FUNC) &_hibayes_SBayesB, 15},
    {"_hibayes_SBayesCpi", (DL_FUNC) &_hibayes_SBayesCpi, 16},
    {"_hibayes_SBayesC", (DL_FUNC) &_hibayes_SBayesC, 15},
    {"_hibayes_SBayesLASSO", (DL_FUNC) &_hibayes_SBayesLASSO, 14},
    {"_hibayes_SBayesR", (DL_FUNC) &_hibayes_SBayesR, 17},
    {"_hibayes_uniform_sample", (DL_FUNC) &_hibayes_uniform_sample, 2},
    {"_hibayes_norm_sample", (DL_FUNC) &_hibayes_norm_sample, 2},
    {"_hibayes_gamma_sample", (DL_FUNC) &_hibayes_gamma_sample, 2},
    {"_hibayes_invgamma_sample", (DL_FUNC) &_hibayes_invgamma_sample, 2},
    {"_hibayes_chisq_sample", (DL_FUNC) &_hibayes_chisq_sample, 1},
    {"_hibayes_invchisq_sample", (DL_FUNC) &_hibayes_invchisq_sample, 2},
    {"_hibayes_beta_sample", (DL_FUNC) &_hibayes_beta_sample, 2},
    {"_hibayes_t_sample", (DL_FUNC) &_hibayes_t_sample, 1},
    {"_hibayes_cauchy_sample", (DL_FUNC) &_hibayes_cauchy_sample, 2},
    {"_hibayes_exponential_sample", (DL_FUNC) &_hibayes_exponential_sample, 1},
    {"_hibayes_laplace_sample", (DL_FUNC) &_hibayes_laplace_sample, 2},
    {"_hibayes_rinvgaussian_sample", (DL_FUNC) &_hibayes_rinvgaussian_sample, 2},
    {"_hibayes_rdirichlet_sample", (DL_FUNC) &_hibayes_rdirichlet_sample, 2},
    {"_hibayes_BigStat", (DL_FUNC) &_hibayes_BigStat, 2},
    {"_hibayes_tXXmat_Geno", (DL_FUNC) &_hibayes_tXXmat_Geno, 4},
    {"_hibayes_tXXmat_Geno_gwas", (DL_FUNC) &_hibayes_tXXmat_Geno_gwas, 7},
    {"_hibayes_tXXmat_Chr", (DL_FUNC) &_hibayes_tXXmat_Chr, 5},
    {"_hibayes_tXXmat_Chr_gwas", (DL_FUNC) &_hibayes_tXXmat_Chr_gwas, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_hibayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
